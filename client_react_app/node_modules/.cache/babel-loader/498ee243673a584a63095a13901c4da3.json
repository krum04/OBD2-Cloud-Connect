{"ast":null,"code":"import _classCallCheck from \"/home/andy/Desktop/Python/rbs/test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/andy/Desktop/Python/rbs/test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/andy/Desktop/Python/rbs/test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/andy/Desktop/Python/rbs/test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/andy/Desktop/Python/rbs/test/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/andy/Desktop/Python/rbs/test/src/components/gauges/LineGraphOverlay.jsx\";\nimport React, { Component } from 'react';\nimport { firebaseDatabase } from \"./firebase\";\nimport Trend from 'react-trend';\nimport './LineGraphOverlay.css';\n\nvar LineGraph =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LineGraph, _Component);\n\n  function LineGraph() {\n    _classCallCheck(this, LineGraph);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LineGraph).apply(this, arguments));\n  }\n\n  _createClass(LineGraph, [{\n    key: \"render\",\n\n    /*constructor(props) {\n        super(props);\n        var keyVal = this.props.keyVal\n        var devId = this.props.devId\n        var nameVal= this.props.nameVal\n        this.firebaseDatabase = firebaseDatabase;\n        this.database1 = this.firebaseDatabase.ref(devId).child('data').child(keyVal1);\n        this.database2 = this.firebaseDatabase.ref(devId).child('data').child(keyVal2);\n         this.state= {\n            dValue1:0,\n            //q: new Array(5),\n            q1: Array.apply(null, Array(100)).map(Number.prototype.valueOf,50)\n        };\n        this.state= {\n            dValue2:0,\n            //q: new Array(5),\n            q2: Array.apply(null, Array(100)).map(Number.prototype.valueOf,50) \n        }\n    }\n     componentDidMount() {\n        this.database1.on(\"value\", snap => {\n            this.setState({\n            dValue1: snap.val()\n            });\n        });\n         this.database2.on(\"value\", snap => {\n            this.setState({\n            dValue1: snap.val()\n            });\n        });\n    }\n    \n    lineGraphData1(){\n    var numUpdate = parseInt(this.state.dValue)\n     if (this.state.q.length <= 100 ){\n        this.state.q.push(numUpdate);\n    }\n    else {\n        this.state.q.push(numUpdate);\n        this.state.q.shift();\n    }\n    }; */\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"Graph1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Trend, {\n        width: 300,\n        height: 200,\n        smooth: true,\n        autoDraw: true,\n        autoDrawDuration: 5,\n        autoDrawEasing: \"ease-out\",\n        data: [1, 2, 3, 4, 5],\n        gradient: ['white'],\n        radius: 25,\n        strokeWidth: 4,\n        strokeLinecap: 'butt',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"graph2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Trend, {\n        width: 300,\n        height: 200,\n        smooth: true,\n        autoDraw: true,\n        autoDrawDuration: 5,\n        autoDrawEasing: \"ease-out\",\n        data: [5, 4, 3, 2, 1],\n        gradient: ['white'],\n        radius: 25,\n        strokeWidth: 4,\n        strokeLinecap: 'butt',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return LineGraph;\n}(Component);\n\nexport { LineGraph as default };","map":{"version":3,"sources":["/home/andy/Desktop/Python/rbs/test/src/components/gauges/LineGraphOverlay.jsx"],"names":["React","Component","firebaseDatabase","Trend","LineGraph"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAO,wBAAP;;IAIqBC,S;;;;;;;;;;;;;;AAEjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAgDI;AACJ,aACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE,GAAd;AAAmB,QAAA,MAAM,EAAE,GAA3B;AACQ,QAAA,MAAM,MADd;AAEQ,QAAA,QAAQ,MAFhB;AAGQ,QAAA,gBAAgB,EAAE,CAH1B;AAIQ,QAAA,cAAc,EAAC,UAJvB;AAKQ,QAAA,IAAI,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CALd;AAMQ,QAAA,QAAQ,EAAE,CAAC,OAAD,CANlB;AAOQ,QAAA,MAAM,EAAE,EAPhB;AAQQ,QAAA,WAAW,EAAE,CARrB;AASQ,QAAA,aAAa,EAAE,MATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CADA,EAcA;AAAK,QAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE,GAAd;AAAmB,QAAA,MAAM,EAAE,GAA3B;AACQ,QAAA,MAAM,MADd;AAEQ,QAAA,QAAQ,MAFhB;AAGQ,QAAA,gBAAgB,EAAE,CAH1B;AAIQ,QAAA,cAAc,EAAC,UAJvB;AAKQ,QAAA,IAAI,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CALd;AAMQ,QAAA,QAAQ,EAAE,CAAC,OAAD,CANlB;AAOQ,QAAA,MAAM,EAAE,EAPhB;AAQQ,QAAA,WAAW,EAAE,CARrB;AASQ,QAAA,aAAa,EAAE,MATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAdA,CADA;AA8BH;;;;EAjFsCH,S;;SAAlBG,S","sourcesContent":["import React, { Component } from 'react';\nimport { firebaseDatabase } from \"./firebase\";\nimport Trend from 'react-trend';\nimport './LineGraphOverlay.css';\n\n\n\nexport default class LineGraph extends Component{\n\n    /*constructor(props) {\n        super(props);\n        var keyVal = this.props.keyVal\n        var devId = this.props.devId\n        var nameVal= this.props.nameVal\n        this.firebaseDatabase = firebaseDatabase;\n        this.database1 = this.firebaseDatabase.ref(devId).child('data').child(keyVal1);\n        this.database2 = this.firebaseDatabase.ref(devId).child('data').child(keyVal2);\n\n        this.state= {\n            dValue1:0,\n            //q: new Array(5),\n            q1: Array.apply(null, Array(100)).map(Number.prototype.valueOf,50)\n        };\n        this.state= {\n            dValue2:0,\n            //q: new Array(5),\n            q2: Array.apply(null, Array(100)).map(Number.prototype.valueOf,50) \n        }\n    }\n\n    componentDidMount() {\n        this.database1.on(\"value\", snap => {\n            this.setState({\n            dValue1: snap.val()\n            });\n        });\n\n        this.database2.on(\"value\", snap => {\n            this.setState({\n            dValue1: snap.val()\n            });\n        });\n    }\n    \n    lineGraphData1(){\n    var numUpdate = parseInt(this.state.dValue)\n\n    if (this.state.q.length <= 100 ){\n        this.state.q.push(numUpdate);\n    }\n    else {\n        this.state.q.push(numUpdate);\n        this.state.q.shift();\n    }\n}; */   \n\n\nrender(){\n    return(\n    <div>\n    <div id=\"Graph1\">\n    <Trend width={300} height={200}\n            smooth\n            autoDraw\n            autoDrawDuration={5}\n            autoDrawEasing=\"ease-out\"\n            data={[1,2,3,4,5]}\n            gradient={['white']}\n            radius={25}\n            strokeWidth={4}\n            strokeLinecap={'butt'}\n            />\n    </div>\n    <div id=\"graph2\">      \n    <Trend width={300} height={200}\n            smooth\n            autoDraw\n            autoDrawDuration={5}\n            autoDrawEasing=\"ease-out\"\n            data={[5,4,3,2,1]}\n            gradient={['white']}\n            radius={25}\n            strokeWidth={4}\n            strokeLinecap={'butt'}\n            />\n    </div>          \n    </div>\n)\n}\n}"]},"metadata":{},"sourceType":"module"}